const express = require('express');
const { Telegraf, Scenes, session } = require('telegraf');
const mongoose = require('mongoose');
require('dotenv').config();
const { OpenAI } = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});


// ะะพะดะบะปััะตะฝะธะต ะบ MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('โ ะะพะดะบะปััะตะฝะพ ะบ MongoDB!');
}).catch((err) => {
  console.error('โ ะัะธะฑะบะฐ ะฟะพะดะบะปััะตะฝะธั ะบ MongoDB:', err);
});

const bot = new Telegraf(process.env.BOT_TOKEN);

// ๐ ะะพะดะบะปััะฐะตะผ ััะตะฝั
const orderScene = require('./scenes/orderScene');
const stage = new Scenes.Stage([orderScene]);
bot.use(session());
bot.use(stage.middleware());

// ะะพะผะฐะฝะดั
// ะะฝะพะฟะบะธ "ะััะฐะฒะธัั ะทะฐัะฒะบั" ะธ "ะะพะปััะธัั ะบะพะฝััะปััะฐัะธั ะะ"
bot.start((ctx) =>
  ctx.reply(
    '๐ ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั! ะัะฑะตัะธัะต ะดะตะนััะฒะธะต:',
    {
      reply_markup: {
        keyboard: [
          ['๐ ะััะฐะฒะธัั ะทะฐัะฒะบั'],
          ['๐ค ะะพะปััะธัั ะบะพะฝััะปััะฐัะธั ะะ']
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
      }
    }
  )
);

// ะะฑัะฐะฑะพัะบะฐ ะบะฝะพะฟะพะบ
bot.hears('๐ ะััะฐะฒะธัั ะทะฐัะฒะบั', (ctx) => ctx.scene.enter('order-wizard'));


bot.hears('๐ค ะะพะปััะธัั ะบะพะฝััะปััะฐัะธั ะะ', (ctx) => {
  ctx.session.waitingAiQuestion = true;
  ctx.reply('๐ฌ ะะฐะฟะธัะธัะต ะฒะฐั ะฒะพะฟัะพั ะฟะพ ะฑะตัะพะฝั ะธะปะธ ัััะพะธัะตะปัััะฒั:');
});

// ะะฐะปะตะต ะปะพะฒะธะผ ัะปะตะดัััะตะต ัะพะพะฑัะตะฝะธะต ะฟะพะปัะทะพะฒะฐัะตะปั:
bot.on('text', async (ctx, next) => {
  if (ctx.session.waitingAiQuestion) {
    ctx.session.waitingAiQuestion = false;
    const userQuestion = ctx.message.text;
    await ctx.reply('โณ ะะฐะฟัะพั ะพัะฟัะฐะฒะปะตะฝ ะะ, ะถะดะธัะต ะพัะฒะตั...');

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo", // ะธะปะธ "gpt-4", ะตัะปะธ ะตััั ะดะพัััะฟ
        messages: [
          { role: "system", content: "ะขั โ ะฟัะพัะตััะธะพะฝะฐะปัะฝัะน ัััะพะธัะตะปัะฝัะน ะบะพะฝััะปััะฐะฝั ะฟะพ ัะพะฒะฐัะฝะพะผั ะฑะตัะพะฝั, ะฟะพะผะพะณะฐะตัั ะฒัะฑัะฐัั ะผะฐัะบั ะธ ะพัะฒะตัะธัั ะฝะฐ ะฒะพะฟัะพัั ะบะปะธะตะฝัะฐ." },
          { role: "user", content: userQuestion }
        ],
        max_tokens: 700,
        temperature: 0.5,
      });
      const answer = completion.choices[0]?.message?.content || "ะะทะฒะธะฝะธัะต, ะฝะต ัะดะฐะปะพัั ะฟะพะปััะธัั ะพัะฒะตั ะพั ะะ.";
      await ctx.reply('๐ค ะัะฒะตั ะะ:\n' + answer);
    } catch (e) {
      console.error(e);
      await ctx.reply('โ ะัะธะฑะบะฐ ะพะฑัะฐัะตะฝะธั ะบ ะะ, ะฟะพะฟัะพะฑัะนัะต ะฟะพะทะถะต.');
    }
  } else {
    // ะััะณะธะต ัะตะบััะพะฒัะต ัะพะพะฑัะตะฝะธั
    return next();
  }
});
bot.hears('๐ค ะะพะปััะธัั ะบะพะฝััะปััะฐัะธั ะะ', (ctx) => {
  ctx.session.waitingAiQuestion = true;
  ctx.reply(
    '๐ฌ ะะฐะฟะธัะธัะต ะฒะฐั ะฒะพะฟัะพั ะฟะพ ะฑะตัะพะฝั ะธะปะธ ัััะพะธัะตะปัััะฒั:',
    {
      reply_markup: {
        keyboard: [['โฌ๏ธ ะะฐะทะฐะด']],
        resize_keyboard: true,
        one_time_keyboard: false,
      }
    }
  );
});
bot.hears('โฌ๏ธ ะะฐะทะฐะด', (ctx) => {
  ctx.session.waitingAiQuestion = false;
  ctx.reply(
    '๐ ะัะฑะตัะธัะต ะดะตะนััะฒะธะต:',
    {
      reply_markup: {
        keyboard: [
          ['๐ ะััะฐะฒะธัั ะทะฐัะฒะบั'],
          ['๐ค ะะพะปััะธัั ะบะพะฝััะปััะฐัะธั ะะ']
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
      }
    }
  );
});
// ๐ก Express-ัะตัะฒะตั
const app = express();
app.use(express.json());
app.use(bot.webhookCallback('/webhook'));

// ๐ ะฃััะฐะฝะพะฒะบะฐ Webhook
(async () => {
  const url = process.env.WEBHOOK_URL; // ะัะธะผะตั: https://beton-bot.onrender.com
  await bot.telegram.setWebhook(`${url}/webhook`);
  console.log('โ Webhook ัััะฐะฝะพะฒะปะตะฝ:', `${url}/webhook`);
})();

// ๐ ะกัะฐัั Express-ัะตัะฒะตัะฐ
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`๐ ะกะตัะฒะตั ัะปััะฐะตั ะฟะพัั ${PORT}`);
});